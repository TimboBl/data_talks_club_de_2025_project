{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-26T11:30:58.133975Z", "invocation_id": "fd7370ef-4a91-42c3-abff-433aff9f60aa", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T11:30:41.225990Z", "completed_at": "2025-03-26T11:30:41.229142Z"}, {"name": "execute", "started_at": "2025-03-26T11:30:41.229896Z", "completed_at": "2025-03-26T11:30:42.190518Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9729189872741699, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "EU", "project_id": "data-talk-clubs", "job_id": "2e7f7a34-e66c-4f8f-81da-b3e4443d00d1", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.eu_emissions_project.stg_emissions_data", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT \n        *\n    FROM `data-talk-clubs`.`eu_emissions_project`.`nitrogen_dioxide_data`\n),\n\n-- First, prepare the data by converting columns to the right format for unpivoting\npreprocessed AS (\n    SELECT\n        freq_airpol_unit_geo_TIME_PERIOD AS metadata,\n        -- All other columns are measurement data columns\n        *\n    FROM source\n),\n\n-- Use UNPIVOT to transform the wide format to long format\nunpivoted AS (\n    SELECT\n        metadata,\n        col_name AS date_column,\n        CAST(col_value AS STRING) AS measurement_value\n    FROM preprocessed\n    UNPIVOT(\n        col_value FOR col_name IN (\n            _2018_01_, _2018_02_, _2018_03_, _2018_04_, _2018_05_, _2018_06_,\n            _2018_07_, _2018_08_, _2018_09_, _2018_10_, _2018_11_, _2018_12_,\n            _2019_01_, _2019_02_, _2019_03_, _2019_04_, _2019_05_, _2019_06_,\n            _2019_07_, _2019_08_, _2019_09_, _2019_10_, _2019_11_, _2019_12_,\n            _2020_01_, _2020_02_, _2020_03_, _2020_04_, _2020_05_, _2020_06_,\n            _2020_07_, _2020_08_, _2020_09_, _2020_10_, _2020_11_, _2020_12_,\n            _2021_01_, _2021_02_, _2021_03_, _2021_04_, _2021_05_, _2021_06_,\n            _2021_07_, _2021_08_, _2021_09_, _2021_10_, _2021_11_, _2021_12_,\n            _2022_01_, _2022_02_, _2022_03_, _2022_04_, _2022_05_, _2022_06_,\n            _2022_07_, _2022_08_, _2022_09_, _2022_10_, _2022_11_, _2022_12_,\n            _2023_01_, _2023_02_, _2023_03_, _2023_04_, _2023_05_, _2023_06_,\n            _2023_07_, _2023_08_, _2023_09_, _2023_10_, _2023_11_, _2023_12_,\n            _2024_01_, _2024_02_, _2024_03_, _2024_04_, _2024_05_, _2024_06_,\n            _2024_07_, _2024_08_, _2024_09_, _2024_10_, _2024_11_, _2024_12_,\n            _2025_01_, _2025_02_\n        )\n    )\n    -- Filter out zero values that represent missing data\n    -- WHERE measurement_value != '0.0'\n),\n\n-- Process the date and value after unpivoting\nprocessed_measurements AS (\n    SELECT\n        metadata,\n        -- Clean up column name by removing underscores\n        REPLACE(date_column, '_', '') AS clean_date_column,\n        -- Keep measurement value as string for now\n        measurement_value,\n        -- Extract month and year from column name and create a proper date\n        DATE(CONCAT(\n            SUBSTR(REPLACE(date_column, '_', ''), 1, 4), '-',\n            SUBSTR(REPLACE(date_column, '_', ''), 5, 2), '-01'\n        )) AS measurement_date,\n        -- Create a readable date label (e.g., 'Jan 2018')\n        CONCAT(\n            FORMAT_DATE('%b', DATE(CONCAT(\n                SUBSTR(REPLACE(date_column, '_', ''), 1, 4), '-',\n                SUBSTR(REPLACE(date_column, '_', ''), 5, 2), '-01'\n            ))),\n            ' ',\n            SUBSTR(REPLACE(date_column, '_', ''), 1, 4)\n        ) AS date_label\n    FROM unpivoted\n),\n\nmetadata_extracted AS (\n    SELECT\n        -- Extract metadata components\n        SPLIT(metadata, ',')[SAFE_OFFSET(0)] AS frequency,\n        SPLIT(metadata, ',')[SAFE_OFFSET(1)] AS airpol,\n        SPLIT(metadata, ',')[SAFE_OFFSET(2)] AS unit,\n        SPLIT(metadata, ',')[SAFE_OFFSET(3)] AS geo_code,\n        date_label,\n        measurement_date,\n        -- Convert measurement value to FLOAT64 here, after unpivoting\n        -- Use TRIM to remove any potential whitespace and explicit comparison\n        CASE \n            WHEN TRIM(measurement_value) = '0.0' THEN NULL\n            ELSE SAFE_CAST(measurement_value AS FLOAT64)\n        END AS measurement_value,\n        CURRENT_TIMESTAMP() AS load_timestamp\n    FROM processed_measurements\n),\n\nfinal AS (\n\nSELECT\n    ROW_NUMBER() OVER() AS id,\n    frequency,\n    airpol,\n    unit,\n    geo_code,\n    date_label,\n    measurement_date,\n    measurement_value,\n    load_timestamp\nFROM metadata_extracted\nORDER BY geo_code, measurement_date\n)\n\nselect * from final", "relation_name": "`data-talk-clubs`.`eu_emissions_project_staging`.`stg_emissions_data`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T11:30:41.219006Z", "completed_at": "2025-03-26T11:30:41.229480Z"}, {"name": "execute", "started_at": "2025-03-26T11:30:41.250900Z", "completed_at": "2025-03-26T11:30:45.271484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.054897308349609, "adapter_response": {"_message": "CREATE TABLE (32.0 rows, 847.0 Bytes processed)", "code": "CREATE TABLE", "rows_affected": 32, "bytes_processed": 847, "bytes_billed": 10485760, "location": "EU", "project_id": "data-talk-clubs", "job_id": "dc4a4436-52ff-4f56-a7e5-2c027f67a249", "slot_ms": 5687}, "message": "CREATE TABLE (32.0 rows, 847.0 Bytes processed)", "failures": null, "unique_id": "model.eu_emissions_project.int_dim_capitals", "compiled": true, "compiled_code": "\n\n-- Reference the capitals seed file\nSELECT\n    geo_code,\n    Capital AS capital_city,\n    Country AS country_name\nFROM `data-talk-clubs`.`eu_emissions_project`.`capitals`", "relation_name": "`data-talk-clubs`.`eu_emissions_project_intermediate`.`int_dim_capitals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T11:30:42.194243Z", "completed_at": "2025-03-26T11:30:42.196323Z"}, {"name": "execute", "started_at": "2025-03-26T11:30:42.196533Z", "completed_at": "2025-03-26T11:30:49.285431Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 7.091967821121216, "adapter_response": {"_message": "CREATE TABLE (2.7k rows, 15.6 KiB processed)", "code": "CREATE TABLE", "rows_affected": 2666, "bytes_processed": 16019, "bytes_billed": 10485760, "location": "EU", "project_id": "data-talk-clubs", "job_id": "cfd2abd2-bbe7-437e-aeab-a9c760335330", "slot_ms": 54072}, "message": "CREATE TABLE (2.7k rows, 15.6 KiB processed)", "failures": null, "unique_id": "model.eu_emissions_project.int_emissions_cleaned", "compiled": true, "compiled_code": "\n\nWITH emissions_data AS (\n    SELECT *\n    FROM `data-talk-clubs`.`eu_emissions_project_staging`.`stg_emissions_data`\n)\n\nSELECT \n    airpol,\n    unit,\n    geo_code,\n    date_label,\n    measurement_date,\n    IF(measurement_value = 0.0, NULL, measurement_value) AS measurement_value\nFROM emissions_data", "relation_name": "`data-talk-clubs`.`eu_emissions_project_intermediate`.`int_emissions_cleaned`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T11:30:49.289976Z", "completed_at": "2025-03-26T11:30:49.296139Z"}, {"name": "execute", "started_at": "2025-03-26T11:30:49.296731Z", "completed_at": "2025-03-26T11:30:54.845306Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 5.556802034378052, "adapter_response": {"_message": "CREATE TABLE (248.0 rows, 97.2 KiB processed)", "code": "CREATE TABLE", "rows_affected": 248, "bytes_processed": 99499, "bytes_billed": 20971520, "location": "EU", "project_id": "data-talk-clubs", "job_id": "434321f4-a2a6-4846-b37d-4e624d507f34", "slot_ms": 114638}, "message": "CREATE TABLE (248.0 rows, 97.2 KiB processed)", "failures": null, "unique_id": "model.eu_emissions_project.emissions_analysis", "compiled": true, "compiled_code": "\n\nWITH emissions_data AS (\n    SELECT *\n    FROM `data-talk-clubs`.`eu_emissions_project_intermediate`.`int_emissions_cleaned`\n),\n\ncapitals_data AS (\n    SELECT *\n    FROM `data-talk-clubs`.`eu_emissions_project_intermediate`.`int_dim_capitals`\n),\n\n-- Join emissions data with capitals information\nemissions_with_location AS (\n    SELECT\n        e.*,\n        c.capital_city,\n        c.country_name\n    FROM emissions_data e\n    LEFT JOIN capitals_data c\n        ON e.geo_code = c.geo_code\n),\n\n-- Calculate yearly averages by location\nyearly_averages AS (\n    SELECT\n        capital_city,\n        country_name,\n        geo_code,\n        EXTRACT(YEAR FROM measurement_date) AS year,\n        airpol,\n        unit,\n        AVG(measurement_value) AS avg_value,\n        MIN(measurement_value) AS min_value,\n        MAX(measurement_value) AS max_value,\n        SUM(measurement_value) AS total_emissions,\n        COUNT(*) AS measurement_count\n    FROM emissions_with_location\n    GROUP BY capital_city, country_name, geo_code, EXTRACT(YEAR FROM measurement_date), airpol, unit\n),\n\n-- Calculate year-over-year changes\nyoy_changes AS (\n    SELECT\n        current_year.*,\n        current_year.avg_value - prev_year.avg_value AS absolute_change,\n        CASE \n            WHEN prev_year.avg_value = 0 OR prev_year.avg_value IS NULL THEN NULL\n            ELSE (current_year.avg_value - prev_year.avg_value) / prev_year.avg_value * 100 \n        END AS percentage_change\n    FROM yearly_averages current_year\n    LEFT JOIN yearly_averages prev_year\n        ON current_year.geo_code = prev_year.geo_code\n        AND current_year.year = prev_year.year + 1\n        AND current_year.airpol = prev_year.airpol\n        AND current_year.unit = prev_year.unit\n),\n\n-- Calculate country rankings by year\ncountry_rankings AS (\n    SELECT\n        year,\n        country_name,\n        airpol,\n        unit,\n        avg_value,\n        RANK() OVER(PARTITION BY year, airpol, unit ORDER BY avg_value) AS pollution_rank_asc,\n        RANK() OVER(PARTITION BY year, airpol, unit ORDER BY avg_value DESC) AS pollution_rank_desc\n    FROM yearly_averages\n    WHERE country_name IS NOT NULL\n)\n\n-- Final analytical model\nSELECT \n    y.capital_city,\n    y.country_name,\n    y.geo_code,\n    y.year,\n    y.airpol,\n    y.unit,\n    y.avg_value,\n    y.min_value,\n    y.max_value,\n    y.total_emissions,\n    y.measurement_count,\n    y.absolute_change,\n    y.percentage_change,\n    -- Add trend indicators\n    CASE\n        WHEN y.percentage_change < -5 THEN 'Significant Decrease'\n        WHEN y.percentage_change BETWEEN -5 AND -0.5 THEN 'Moderate Decrease'\n        WHEN y.percentage_change BETWEEN -0.5 AND 0.5 THEN 'Stable'\n        WHEN y.percentage_change BETWEEN 0.5 AND 5 THEN 'Moderate Increase'\n        WHEN y.percentage_change > 5 THEN 'Significant Increase'\n        ELSE 'Insufficient Data'\n    END AS trend_category,\n    -- Add country rankings\n    r.pollution_rank_asc,\n    r.pollution_rank_desc,\n    -- Calculate percentile within year (lower percentile = lower pollution)\n    PERCENT_RANK() OVER(PARTITION BY y.year, y.unit ORDER BY y.avg_value) AS pollution_percentile,\n    -- Add a flag for capitals exceeding EU average (if EU27_2020 data exists)\n    CASE\n        WHEN eu.avg_value IS NULL THEN NULL\n        WHEN y.avg_value > eu.avg_value THEN TRUE\n        ELSE FALSE\n    END AS exceeds_eu_average,\n    -- Calculate how much above/below EU average (in percentage)\n    CASE\n        WHEN eu.avg_value IS NULL OR eu.avg_value = 0 THEN NULL\n        ELSE (y.avg_value - eu.avg_value) / eu.avg_value * 100\n    END AS percent_diff_from_eu_avg,\n    CURRENT_TIMESTAMP() AS analysis_timestamp\nFROM yoy_changes y\nLEFT JOIN country_rankings r\n    ON y.year = r.year\n    AND y.country_name = r.country_name\n    AND y.unit = r.unit\nLEFT JOIN yearly_averages eu\n    ON y.year = eu.year\n    AND y.unit = eu.unit\n    AND eu.geo_code = 'EU27_2020'", "relation_name": "`data-talk-clubs`.`eu_emissions_project_marts`.`emissions_analysis`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-26T11:30:49.293437Z", "completed_at": "2025-03-26T11:30:49.296452Z"}, {"name": "execute", "started_at": "2025-03-26T11:30:49.298397Z", "completed_at": "2025-03-26T11:30:58.128667Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 8.83980917930603, "adapter_response": {"_message": "CREATE TABLE (2.7k rows, 97.2 KiB processed)", "code": "CREATE TABLE", "rows_affected": 2666, "bytes_processed": 99499, "bytes_billed": 20971520, "location": "EU", "project_id": "data-talk-clubs", "job_id": "964ede62-8dec-4d8d-a5a8-b591265b2c44", "slot_ms": 176878}, "message": "CREATE TABLE (2.7k rows, 97.2 KiB processed)", "failures": null, "unique_id": "model.eu_emissions_project.emissions_analysis_monthly", "compiled": true, "compiled_code": "\n\nWITH emissions_data AS (\n    SELECT *\n    FROM `data-talk-clubs`.`eu_emissions_project_intermediate`.`int_emissions_cleaned`\n),\n\ncapitals_data AS (\n    SELECT *\n    FROM `data-talk-clubs`.`eu_emissions_project_intermediate`.`int_dim_capitals`\n),\n\n-- Join emissions data with capitals information\nemissions_with_location AS (\n    SELECT\n        e.*,\n        c.capital_city,\n        c.country_name\n    FROM emissions_data e\n    LEFT JOIN capitals_data c\n        ON e.geo_code = c.geo_code\n),\n\n-- Monthly data is already available in the cleaned data\n-- No need for additional aggregation by month\nmonthly_data AS (\n    SELECT\n        capital_city,\n        country_name,\n        geo_code,\n        measurement_date,\n        FORMAT_DATE('%Y-%m', measurement_date) AS year_month,\n        EXTRACT(YEAR FROM measurement_date) AS year,\n        EXTRACT(MONTH FROM measurement_date) AS month,\n        airpol,\n        unit,\n        measurement_value\n    FROM emissions_with_location\n),\n\n-- Calculate month-over-month changes\nmom_changes AS (\n    SELECT\n        current_month.*,\n        current_month.measurement_value - prev_month.measurement_value AS absolute_change,\n        CASE \n            WHEN prev_month.measurement_value = 0 OR prev_month.measurement_value IS NULL THEN NULL\n            ELSE (current_month.measurement_value - prev_month.measurement_value) / prev_month.measurement_value * 100 \n        END AS percentage_change\n    FROM monthly_data current_month\n    LEFT JOIN monthly_data prev_month\n        ON current_month.geo_code = prev_month.geo_code\n        AND DATE_SUB(current_month.measurement_date, INTERVAL 1 MONTH) = prev_month.measurement_date\n        AND current_month.airpol = prev_month.airpol\n        AND current_month.unit = prev_month.unit\n),\n\n-- Calculate country rankings by month\ncountry_rankings AS (\n    SELECT\n        year_month,\n        country_name,\n        airpol,\n        unit,\n        measurement_value,\n        RANK() OVER(PARTITION BY year_month, airpol, unit ORDER BY measurement_value) AS pollution_rank_asc,\n        RANK() OVER(PARTITION BY year_month, airpol, unit ORDER BY measurement_value DESC) AS pollution_rank_desc\n    FROM monthly_data\n    WHERE country_name IS NOT NULL\n)\n\n-- Final analytical model\nSELECT \n    m.capital_city,\n    m.country_name,\n    m.geo_code,\n    m.measurement_date,\n    m.year,\n    m.month,\n    m.year_month,\n    m.airpol,\n    m.unit,\n    m.measurement_value,\n    m.absolute_change,\n    m.percentage_change,\n    -- Add trend indicators\n    CASE\n        WHEN m.percentage_change < -5 THEN 'Significant Decrease'\n        WHEN m.percentage_change BETWEEN -5 AND -0.5 THEN 'Moderate Decrease'\n        WHEN m.percentage_change BETWEEN -0.5 AND 0.5 THEN 'Stable'\n        WHEN m.percentage_change BETWEEN 0.5 AND 5 THEN 'Moderate Increase'\n        WHEN m.percentage_change > 5 THEN 'Significant Increase'\n        ELSE 'Insufficient Data'\n    END AS trend_category,\n    -- Add country rankings\n    r.pollution_rank_asc,\n    r.pollution_rank_desc,\n    -- Calculate percentile within month (lower percentile = lower pollution)\n    PERCENT_RANK() OVER(PARTITION BY m.year_month, m.unit ORDER BY m.measurement_value) AS pollution_percentile,\n    -- Add a flag for capitals exceeding EU average (if EU27_2020 data exists)\n    CASE\n        WHEN eu.measurement_value IS NULL THEN NULL\n        WHEN m.measurement_value > eu.measurement_value THEN TRUE\n        ELSE FALSE\n    END AS exceeds_eu_average,\n    -- Calculate how much above/below EU average (in percentage)\n    CASE\n        WHEN eu.measurement_value IS NULL OR eu.measurement_value = 0 THEN NULL\n        ELSE (m.measurement_value - eu.measurement_value) / eu.measurement_value * 100\n    END AS percent_diff_from_eu_avg,\n    CURRENT_TIMESTAMP() AS analysis_timestamp\nFROM mom_changes m\nLEFT JOIN country_rankings r\n    ON m.year_month = r.year_month\n    AND m.country_name = r.country_name\n    AND m.unit = r.unit\nLEFT JOIN monthly_data eu\n    ON m.year_month = eu.year_month\n    AND m.unit = eu.unit\n    AND eu.geo_code = 'EU27_2020'", "relation_name": "`data-talk-clubs`.`eu_emissions_project_marts`.`emissions_analysis_monthly`", "batch_results": null}], "elapsed_time": 17.9966824054718, "args": {"skip_nodes_if_on_run_start_fails": false, "send_anonymous_usage_stats": true, "version_check": true, "invocation_command": "dbt run", "use_colors": true, "project_dir": "/Users/timbo/Documents/DataTalks/project/src", "state_modified_compare_vars": false, "write_json": true, "quiet": false, "static_parser": true, "log_level_file": "debug", "defer": false, "partial_parse_file_diff": true, "indirect_selection": "eager", "log_format": "default", "print": true, "empty": false, "printer_width": 80, "log_file_max_bytes": 10485760, "favor_state": false, "require_resource_names_without_spaces": false, "log_path": "/Users/timbo/Documents/DataTalks/project/src/logs", "require_explicit_package_overrides_for_builtin_materializations": true, "populate_cache": true, "profiles_dir": "/Users/timbo/.dbt", "require_nested_cumulative_type_params": false, "state_modified_compare_more_unrendered_values": false, "log_level": "info", "introspect": true, "show_resource_report": false, "strict_mode": false, "select": [], "require_yaml_configuration_for_mf_time_spines": false, "log_format_file": "debug", "partial_parse": true, "cache_selected_only": false, "use_colors_file": true, "which": "run", "exclude": [], "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "source_freshness_run_project_hooks": false, "require_batched_execution_for_custom_microbatch_strategy": false, "macro_debugging": false}}